/*
 * IST 311 Team 34 Group Project
 */
package team34;

import java.io.File;
import java.io.IOException;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @Guntoro Gunawan
 */
public class Login extends javax.swing.JFrame {
    
    // Constants
    private static final int MAX_CUSTOMERRECORDS = 50;
    private static final int MAX_INVENTORYRECORDS = 50;
    private static final int MAX_ORDERRECORDS = 100;
    
    
    // Variables and Instances of Classes
    public static String lastOrderNumber="5004";
    
    public String getLastOrderNumber() {
        return lastOrderNumber;
    }
    public void setLastOrderNumber(String lNumber){
        lastOrderNumber = lNumber;
    }    
    
    public static CustomerRecord currentCustomer;       //store an instance of current Customer which is a CustomerRecord
    public static CustomerRecord customerArray[] = new CustomerRecord[MAX_CUSTOMERRECORDS];        //store all customer records
    public static int nextCustomer = 0;       // location of next empty position in the array
    public static int numCustomers = 0;       // number of input customer records            
    private static String xmlCustomerID;       // temporary storage for customerID from xml
    private static String xmlName;             // temporary storage for customer name from xml
    private static String xmlAddress;          // temporary storage for customer address from xml
    private static String xmlPhone;            // temporary storage for customer phone from xml
    private static String xmlEmail;            // temporary storage for customer email from xml
    private static String xmlSpending;         // temporary storage for customer spending from xml
    
    private static InventoryRecord currentInventory;       //store an instance of current Customer which is a CustomerRecord
    private static InventoryRecord inventoryArray[] = new InventoryRecord[MAX_INVENTORYRECORDS];        //store all customer records
    private static int nextInventory = 0;       // location of next empty position in the array
    private static int numInventory = 0;       // number of input inventory records
    private static String xmlIngName;          // temporary storage for ingredient name from xml
    private static String xmlStock;            // temporary storage for ingredient stock on hand from xml
    
    private static OrderRecord currentOrder;       //store an instance of current order which is a OrderRecord
    private static OrderRecord orderArray[] = new OrderRecord[MAX_ORDERRECORDS];        //store all order records
    private static int nextOrder = 0;              // location of next empty position in the array
    private static int numOrders = 0;               // number of input order records
    private static String xmlOrderID;              // temporary storage for order ID from xml
    private static String xmlOrderDate;            // temporary storage for order date from xml
    private static String xmlOrderCustomerID;      // temporary storage for customer ID from xml
    private static String xmlItemCode1;            // temporary storage for code of item 1 from xml
    private static String xmlQ1;                   // temporary storage for quantity of item 1 from xml
    private static String xmlItemCode2;            // temporary storage for code of item 2 from xml
    private static String xmlQ2;                   // temporary storage for quantity of item 2 from xml
    private static String xmlItemCode3;            // temporary storage for code of item 3 from xml
    private static String xmlQ3;                   // temporary storage for quantity of item 3 from xml
    private static String xmlItemCode4;            // temporary storage for code of item 4 from xml
    private static String xmlQ4;                   // temporary storage for quantity of item 4 from xml
    private static String xmlItemCode5;            // temporary storage for code of item 5 from xml
    private static String xmlQ5;                   // temporary storage for quantity of item 5 from xml
    private static String xmlTotalCost;            // temporary storage for total cost or oder from xml
    
    
    public static Database myDatabase = new Database();       //instance of the database class

    /**
     * Creates new form Login
     */
    public Login() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgJobPosition = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jtfUsername = new javax.swing.JTextField();
        jpfPassword = new javax.swing.JPasswordField();
        jbLogin = new javax.swing.JButton();
        lMessage = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        rbCashier = new javax.swing.JRadioButton();
        rbChef = new javax.swing.JRadioButton();
        rbManager = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Login Form");

        jLabel2.setText("Username:");

        jLabel3.setText("Password:");

        jpfPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpfPasswordActionPerformed(evt);
            }
        });

        jbLogin.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jbLogin.setText("Login");
        jbLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLoginActionPerformed(evt);
            }
        });

        lMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel4.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel4.setText("Job Position:");

        bgJobPosition.add(rbCashier);
        rbCashier.setText("Cashier");
        rbCashier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCashierActionPerformed(evt);
            }
        });

        bgJobPosition.add(rbChef);
        rbChef.setText("Chef");
        rbChef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbChefActionPerformed(evt);
            }
        });

        bgJobPosition.add(rbManager);
        rbManager.setText("Manager");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbCashier)
                        .addGap(18, 18, 18)
                        .addComponent(rbChef)
                        .addGap(28, 28, 28)
                        .addComponent(rbManager)))
                .addGap(92, 92, 92))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jtfUsername)
                                .addComponent(jpfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel4))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(lMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(jLabel1)))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jpfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbChef)
                    .addComponent(rbManager)
                    .addComponent(rbCashier))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, Short.MAX_VALUE)
                .addComponent(jbLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jpfPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpfPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jpfPasswordActionPerformed

    private void jbLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLoginActionPerformed
        // TODO add your handling code here:
        if (jtfUsername.getText().equals("manager") && jpfPassword.getText().equals("123"))
        {
            lMessage.setText("Login Success, Choose Role");
            
            if (rbCashier.isSelected())
            {
                Cashier s1 = new Cashier();
                s1.setVisible(true);        
                this.setVisible(false);
                //System.out.println("Cashier selected");
                //get contents of xml file and load the array
                readCustomersXMLFile();
                storeCustomerData();
                readInventoryXMLFile();
                storeInventoryData();
                readOrdersXMLFile();
                storeOrderData();
                lastOrderNumber=Integer.toString(nextOrder+5000);
            }
            
            if (rbChef.isSelected())
            {
                Kitchen s2 = new Kitchen();
                s2.setVisible(true);
                
                this.setVisible(false);
            }
            
            if (rbManager.isSelected())
            {
                Manager s3 = new Manager();
                s3.setVisible(true);
                
                this.setVisible(false);
            }
        }
        else {
            lMessage.setText("Login Error");
        }
    }//GEN-LAST:event_jbLoginActionPerformed

    private void rbCashierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCashierActionPerformed
        // TODO add your handling code here:        
    }//GEN-LAST:event_rbCashierActionPerformed

    private void rbChefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbChefActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbChefActionPerformed
       
    //the method reads info from the input Customers XML file, and then stores it in the customerArray[]
    public void readCustomersXMLFile(){
        try {
            File file = new File("Customers.xml");
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            org.w3c.dom.Document doc = db.parse(file);
            doc.getDocumentElement().normalize();            
            NodeList nodeLst = doc.getElementsByTagName("Customer");

            for (int s = 0; s < nodeLst.getLength(); s++) {
                Node fstNode = nodeLst.item(s);    
                if (fstNode.getNodeType() == Node.ELEMENT_NODE) {  
                    org.w3c.dom.Element fstElmnt = (org.w3c.dom.Element) fstNode;
                    NodeList fstNmElmntLst = fstElmnt.getElementsByTagName("CustomerID");
                    org.w3c.dom.Element fstNmElmnt = (org.w3c.dom.Element) fstNmElmntLst.item(0);
                    NodeList fstNm = fstNmElmnt.getChildNodes();
                    xmlCustomerID = ((Node) fstNm.item(0)).getNodeValue();                    
                    
                    NodeList secNmElmntLst = fstElmnt.getElementsByTagName("Name");
                    org.w3c.dom.Element secNmElmnt = (org.w3c.dom.Element) secNmElmntLst.item(0);
                    NodeList secNm = secNmElmnt.getChildNodes();
                    xmlName = ((Node) secNm.item(0)).getNodeValue();                    
                    
                    NodeList trdNmElmntLst = fstElmnt.getElementsByTagName("Address");
                    org.w3c.dom.Element trdNmElmnt = (org.w3c.dom.Element) trdNmElmntLst.item(0);
                    NodeList trdNm = trdNmElmnt.getChildNodes();
                    xmlAddress = ((Node) trdNm.item(0)).getNodeValue();                    
                    
                    NodeList frtNmElmntLst = fstElmnt.getElementsByTagName("Phone");
                    org.w3c.dom.Element frtNmElmnt = (org.w3c.dom.Element) frtNmElmntLst.item(0);
                    NodeList frtNm = frtNmElmnt.getChildNodes();
                    xmlPhone = ((Node) frtNm.item(0)).getNodeValue();                    
                    
                    NodeList fivNmElmntLst = fstElmnt.getElementsByTagName("Email");
                    org.w3c.dom.Element fivNmElmnt = (org.w3c.dom.Element) fivNmElmntLst.item(0);
                    NodeList fivNm = fivNmElmnt.getChildNodes();
                    xmlEmail = ((Node) fivNm.item(0)).getNodeValue();                    
                    
                    NodeList sixNmElmntLst = fstElmnt.getElementsByTagName("Spending");
                    org.w3c.dom.Element sixNmElmnt = (org.w3c.dom.Element) sixNmElmntLst.item(0);
                    NodeList sixNm = sixNmElmnt.getChildNodes();
                    xmlSpending = ((Node) sixNm.item(0)).getNodeValue();
                    
                    CustomerRecord customer = new CustomerRecord(xmlCustomerID, xmlName, xmlAddress, xmlPhone, xmlEmail, xmlSpending);
                    // store customer record in array
                    customerArray[nextCustomer] = customer;
                
                    // increment number of customer records and move to next position in customerArray
                    numCustomers++;
                    nextCustomer++;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 
    public void storeCustomerData ()
    {
      // create table in the database
      myDatabase.createTable();
      
      // store each Customer Record in the table
      for (int i = 0; i<numCustomers; i++)
       {
           myDatabase.storeCustomerRecord(                   
                   customerArray[i].getCustomerID(), 
                   customerArray[i].getName(),
                   customerArray[i].getAddress(), 
                   customerArray[i].getPhone(),
                   customerArray[i].getEmail(),
                   customerArray[i].getSpending());
      }    
    }//end storeCustomerData
    
    //the method reads info from the input Inventory XML file, and then stores it in the customerArray[]
    public void readInventoryXMLFile(){
        try {
            File file = new File("Inventory.xml");
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            org.w3c.dom.Document doc = db.parse(file);
            doc.getDocumentElement().normalize();
            NodeList nodeLst = doc.getElementsByTagName("Ingredient");

            for (int s = 0; s < nodeLst.getLength(); s++) {
                Node fstNode = nodeLst.item(s);    
                if (fstNode.getNodeType() == Node.ELEMENT_NODE) {  
                    org.w3c.dom.Element fstElmnt = (org.w3c.dom.Element) fstNode;
                    NodeList fstNmElmntLst = fstElmnt.getElementsByTagName("IngName");
                    org.w3c.dom.Element fstNmElmnt = (org.w3c.dom.Element) fstNmElmntLst.item(0);
                    NodeList fstNm = fstNmElmnt.getChildNodes();
                    xmlIngName = ((Node) fstNm.item(0)).getNodeValue();                    
                    
                    NodeList secNmElmntLst = fstElmnt.getElementsByTagName("Stock");
                    org.w3c.dom.Element secNmElmnt = (org.w3c.dom.Element) secNmElmntLst.item(0);
                    NodeList secNm = secNmElmnt.getChildNodes();
                    xmlStock = ((Node) secNm.item(0)).getNodeValue();
                    
                    InventoryRecord inventory = new InventoryRecord(xmlIngName, xmlStock);
                    // store inventory record in array
                    inventoryArray[nextInventory] = inventory;
                
                    // increment number of inventory records and move to next position in customerArray
                    numInventory++;
                    nextInventory++;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 
    public void storeInventoryData ()
    {
      // create table in the database
      //myDatabase.createTable();
      
      // store each Inventory Record in the table
      for (int i = 0; i<numInventory; i++)
       {
           myDatabase.storeInventoryRecord(                   
                   inventoryArray[i].getIngName(),
                   inventoryArray[i].getStock());
      }    
    }//end storeData
    
    //the method reads info from the input Customers XML file, and then stores it in the customerArray[]
    public void readOrdersXMLFile(){
        try {
            File file = new File("Orders.xml");
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            org.w3c.dom.Document doc = db.parse(file);
            doc.getDocumentElement().normalize();
            NodeList nodeLst = doc.getElementsByTagName("Order");
            setLastOrderNumber(Integer.toString(nodeLst.getLength()));            

            for (int s = 0; s < nodeLst.getLength(); s++) {
                Node fstNode = nodeLst.item(s);    
                if (fstNode.getNodeType() == Node.ELEMENT_NODE) {  
                    org.w3c.dom.Element fstElmnt = (org.w3c.dom.Element) fstNode;
                    NodeList fstNmElmntLst = fstElmnt.getElementsByTagName("OrderID");
                    org.w3c.dom.Element fstNmElmnt = (org.w3c.dom.Element) fstNmElmntLst.item(0);
                    NodeList fstNm = fstNmElmnt.getChildNodes();
                    xmlOrderID = ((Node) fstNm.item(0)).getNodeValue();                    
                    
                    NodeList secNmElmntLst = fstElmnt.getElementsByTagName("OrderDate");
                    org.w3c.dom.Element secNmElmnt = (org.w3c.dom.Element) secNmElmntLst.item(0);
                    NodeList secNm = secNmElmnt.getChildNodes();
                    xmlOrderDate = ((Node) secNm.item(0)).getNodeValue();                    
                    
                    NodeList trdNmElmntLst = fstElmnt.getElementsByTagName("OrderCustomerID");
                    org.w3c.dom.Element trdNmElmnt = (org.w3c.dom.Element) trdNmElmntLst.item(0);
                    NodeList trdNm = trdNmElmnt.getChildNodes();
                    xmlOrderCustomerID = ((Node) trdNm.item(0)).getNodeValue();                    
                    
                    NodeList frtNmElmntLst = fstElmnt.getElementsByTagName("ItemCode1");
                    org.w3c.dom.Element frtNmElmnt = (org.w3c.dom.Element) frtNmElmntLst.item(0);
                    NodeList frtNm = frtNmElmnt.getChildNodes();
                    xmlItemCode1 = ((Node) frtNm.item(0)).getNodeValue();                    
                    
                    NodeList fivNmElmntLst = fstElmnt.getElementsByTagName("Q1");
                    org.w3c.dom.Element fivNmElmnt = (org.w3c.dom.Element) fivNmElmntLst.item(0);
                    NodeList fivNm = fivNmElmnt.getChildNodes();
                    xmlQ1 = ((Node) fivNm.item(0)).getNodeValue();                     
                    
                    NodeList sixNmElmntLst = fstElmnt.getElementsByTagName("ItemCode2");
                    org.w3c.dom.Element sixNmElmnt = (org.w3c.dom.Element) sixNmElmntLst.item(0);
                    NodeList sixNm = sixNmElmnt.getChildNodes();
                    xmlItemCode2 = ((Node) sixNm.item(0)).getNodeValue();                    
                    
                    NodeList svnNmElmntLst = fstElmnt.getElementsByTagName("Q2");
                    org.w3c.dom.Element svnNmElmnt = (org.w3c.dom.Element) svnNmElmntLst.item(0);
                    NodeList svnNm = svnNmElmnt.getChildNodes();
                    xmlQ2 = ((Node) svnNm.item(0)).getNodeValue();                    
                    
                    NodeList eigNmElmntLst = fstElmnt.getElementsByTagName("ItemCode3");
                    org.w3c.dom.Element eigNmElmnt = (org.w3c.dom.Element) eigNmElmntLst.item(0);
                    NodeList eigNm = eigNmElmnt.getChildNodes();
                    xmlItemCode3 = ((Node) eigNm.item(0)).getNodeValue();                    
                    
                    NodeList ninNmElmntLst = fstElmnt.getElementsByTagName("Q3");
                    org.w3c.dom.Element ninNmElmnt = (org.w3c.dom.Element) ninNmElmntLst.item(0);
                    NodeList ninNm = ninNmElmnt.getChildNodes();
                    xmlQ3 = ((Node) ninNm.item(0)).getNodeValue();                    
                    
                    NodeList tenNmElmntLst = fstElmnt.getElementsByTagName("ItemCode4");
                    org.w3c.dom.Element tenNmElmnt = (org.w3c.dom.Element) tenNmElmntLst.item(0);
                    NodeList tenNm = tenNmElmnt.getChildNodes();
                    xmlItemCode4 = ((Node) tenNm.item(0)).getNodeValue();                    
                    
                    NodeList elvNmElmntLst = fstElmnt.getElementsByTagName("Q4");
                    org.w3c.dom.Element elvNmElmnt = (org.w3c.dom.Element) elvNmElmntLst.item(0);
                    NodeList elvNm = elvNmElmnt.getChildNodes();
                    xmlQ4 = ((Node) elvNm.item(0)).getNodeValue();                    
                    
                    NodeList twlNmElmntLst = fstElmnt.getElementsByTagName("ItemCode5");
                    org.w3c.dom.Element twlNmElmnt = (org.w3c.dom.Element) twlNmElmntLst.item(0);
                    NodeList twlNm = twlNmElmnt.getChildNodes();
                    xmlItemCode5 = ((Node) twlNm.item(0)).getNodeValue();                    
                    
                    NodeList thrNmElmntLst = fstElmnt.getElementsByTagName("Q5");
                    org.w3c.dom.Element thrNmElmnt = (org.w3c.dom.Element) thrNmElmntLst.item(0);
                    NodeList thrNm = thrNmElmnt.getChildNodes();
                    xmlQ5 = ((Node) thrNm.item(0)).getNodeValue();                    
                    
                    NodeList ftnNmElmntLst = fstElmnt.getElementsByTagName("TotalCost");
                    org.w3c.dom.Element ftnNmElmnt = (org.w3c.dom.Element) ftnNmElmntLst.item(0);
                    NodeList ftnNm = ftnNmElmnt.getChildNodes();
                    xmlTotalCost = ((Node) ftnNm.item(0)).getNodeValue();
                    
                    OrderRecord order = new OrderRecord(xmlOrderID, xmlOrderDate, xmlOrderCustomerID, xmlItemCode1, xmlQ1, xmlItemCode2, xmlQ2, 
                                                        xmlItemCode3, xmlQ3, xmlItemCode4, xmlQ4, xmlItemCode5, xmlQ5, xmlTotalCost);
                    // store order record in array
                    orderArray[nextOrder] = order;
                
                    // increment number of order records and move to next position in customerArray
                    numOrders++;
                    nextOrder++;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 
    public void storeOrderData ()
    {
      // create table in the database
      //myDatabase.createTable();
      
      // store each Customer Record in the table
      for (int i = 0; i<numOrders; i++)
       {
           myDatabase.storeOrderRecord(                   
                   orderArray[i].getOrderID(), 
                   orderArray[i].getOrderDate(),
                   orderArray[i].getOrderCustomerID(), 
                   orderArray[i].getItemCode1(),
                   orderArray[i].getQ1(),
                   orderArray[i].getItemCode2(),
                   orderArray[i].getQ2(),
                   orderArray[i].getItemCode3(),
                   orderArray[i].getQ3(),
                   orderArray[i].getItemCode4(),
                   orderArray[i].getQ4(),
                   orderArray[i].getItemCode5(),
                   orderArray[i].getQ5(),
                   orderArray[i].getTotalCost());            
      }    
    }//end storeCustomerData
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgJobPosition;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton jbLogin;
    private javax.swing.JPasswordField jpfPassword;
    private javax.swing.JTextField jtfUsername;
    private javax.swing.JLabel lMessage;
    private javax.swing.JRadioButton rbCashier;
    private javax.swing.JRadioButton rbChef;
    private javax.swing.JRadioButton rbManager;
    // End of variables declaration//GEN-END:variables
}
